# This is how I took a multi - species alignment fasta files and converted it into VCF format to be used in ADMXITURE.
# This script assumes you have aligned your MSA files and you have pruned poorly aligned samples. I like to use muscle to align genes.
#Programs used to generate the input here: 1. trimmoamtic 2. cutadapt 3. hybpiper 4. hybphaser 5. muscle 
# Once you have aligned fasta files trim them using Clipkit (https://jlsteenwyk.com/ClipKIT/)



# here i am running smart + gappy and just keeping parsimony informative + constant sites
clipkit aligned.fasta -m kpic-smart-gap -o example.fasta

# After trimming the gene files, merge them all into one alignment - many ways to do this (AMAS is one way)

#After files are combined I use Snp-sites to make a vcf file (https://github.com/sanger-pathogens/snp-sites)
snp-sites -v -o example.vcf example.fasta

#Once you have your VCF file you will want to filter it using vcf tools (many ways to do this)
#Method one did not detect hybrid samples in Juglans after using ADMIXTURE
vcftools --vcf input.vcf --min-alleles 2 --max-alleles 2 --recode --out filtered

#Method two also did not work - got rid of too many snps probably/tried to account for linkage
vcftools --vcf --vcf alleles.recode.vcf --thin 1000 --out thinned --recode

#Method Three - seems to have worked best so far....
vcftools --vcf this.vcf --maf 0.05 --recode --out maf_filtered

# once you are satisfied with how you filtered your vcf need to convert it into ped format using plink and specficially recode for 12
plink --vcf alleles.recode.vcf  --make-bed --out initial_plink --allow-extra-chr --double-id
plink --bfile initial_plink --recode12 --out admixture_input --allow-extra-chr --double-id

# I used an admixture wrapper from Danel Portik https://github.com/dportik/admixture-wrapper to run the program
python3 admixture_wrapper.py -i ~/Jug_hybphaser/Jug_align_trim/clipped/real_het/admixutre/allele.filter --kmin 5 --kmax 10 --reps 10 -t 4 --cv 10

# To make the input file for plotting in R
#Note combine .fam file and .q file and check the .txt file for sample names + # of clusters you are testing, below this file should have 9
paste initial_plink.fam admixture_input.9.3.Q | awk '{print $1, $7, $8, $9, $10, $11, $12, $13, $14, $15}' > admixture_K9B.txt



### Below is the R code I used to make the structure plots
#### Load libraries to make plots
library(ggplot2)
library(tidyr)
library(dplyr)

admix_data <- read.table("admixture_K5.txt", header=FALSE)
colnames(admix_data) <- c("Sample", "Cluster1", "Cluster2", "Cluster3","Cluster4", "Cluster5")

# Convert to long format
admix_long <- pivot_longer(admix_data, cols = starts_with("Cluster"), 
                           names_to = "Cluster", values_to = "Ancestry")

# Identify the dominant cluster for each sample
sample_order <- admix_long %>%
  group_by(Sample) %>%
  slice_max(Ancestry, n = 1, with_ties = FALSE) %>%  # Get the row with the highest ancestry per sample
  arrange(Cluster, desc(Ancestry)) %>%  # First by cluster, then by ancestry proportion
  pull(Sample)

# Reorder Sample factor levels
admix_long$Sample <- factor(admix_long$Sample, levels = sample_order)

# Plot with sorted order
ggplot(admix_long, aes(x = Sample, y = Ancestry, fill = Cluster)) +
  geom_bar(stat = "identity", width = 1) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 6)) +
  labs(title = "ADMIXTURE Plot (Sorted by Cluster)", x = "Samples", y = "Ancestry Proportion") +
  ggsave("admixture_plotclustersK5.png", width = 20, height = 4, dpi = 300)





